# returns the total numbers in
# list that are divisible by ten.
def divisible_by_ten(nums):
    count = 0
    for number in nums:
        if number % 10 == 0:
            count += 1
    return count


print(divisible_by_ten([20, 25, 30, 35, 40]))


# adds a greeting to a list of names.
def add_greetings(names):
    new_lst = []
    for i in names:
        new_lst.append('Go to Hell, ' + i + "!")
    return new_lst


print(add_greetings(['Dean', 'Sam', 'Bobby']))


# following functions delete
# the odd or even numbers that
# begin in a list.
def delete_starting_evens(lst):
    while len(lst) > 0 and lst[0] % 2 == 0:
        lst = lst[1:]
    return lst


def delete_starting_odds(lst):
    while len(lst) > 0 and lst[0] % 2 != 0:
        lst = lst[1:]
    return lst


print(delete_starting_evens([2, 4, 6, 8, 3, 5, 7, 9]))
print(delete_starting_odds([1, 3, 5, 7, 9, 3, 2, 4, 5, 6, 7, 8]))


# returns total number of odd indices
def odd_indices(lst):
    new_lst = []
    for index in range(1, len(lst), 2):
        new_lst.append(lst[index])
    if index % 2 != 0:
        return new_lst


# returns total number of even indices
def even_indices(lst):
    new_lst2 = []
    for index in range(0, len(lst), 2):
        new_lst2.append(lst[index])
    if index % 2 == 0:
        return new_lst2


print(odd_indices([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))
print(even_indices([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))


# returns value of number in list raised to
# the power of number in second list
def exponents(bases, powers):
    new_lst = []
    for base in bases:
        for power in powers:
            new_lst.append(base ** power)
    return new_lst


# returns multiple value of numbers in two lists
def multiply(a, b):
    new_sum = []
    for num in a:
        for num1 in b:
            new_sum.append(num * num1)
    return new_sum


print(exponents([1, 2, 3], [1, 2, 3]))

print(multiply([1, 2, 3], [1, 2, 3]))


# returns the list with the largest sum; if equal, returns lst1
def larger_sum(lst1, lst2):
    sum1 = 0
    sum2 = 0
    for number in lst1:
        sum1 += number
    for number in lst2:
        sum2 += number
    if sum1 >= sum2:
        return lst1
    else:
        return lst2


# returns list with lowest sum, if equal, returns lst1

def lower_sum(lst1, lst2):
    sum1 = 0
    sum2 = 0
    for number in lst1:
        sum1 += number
    for number in lst2:
        sum2 += number
    if sum1 <= sum2:
        return lst1
    else:
        return lst2


print(larger_sum([1, 9, 5], [8, 8, 7]))
print(lower_sum([1, 9, 5], [8, 8, 7]))


# adds numbers in a list until their value reaches designated threshold

def over_threshold(lst):
    sum1 = 0
    for number in lst:
        sum1 += number
        if sum1 > 6000:
            break
    return sum1


print(over_threshold([800, 900, 120, 500, 3000, 140, 570, 980, 1000]))


# returns largest number in list 'nums'

def max_num(nums):
    new = 0
    for number in nums:
        if number > new:
            new = number
    return new


print(max_num([5000, -10, 1000, 75, 200]))


# returns indices where values are equal

def same_values(lst1, lst2):
    same_value = []
    for index in range(len(lst1)):
        if lst1[index] == lst2[index]:
            same_value.append(index)
    return same_value


print(same_values([5, 1, -10, 3, 3], [5, 10, -10, 3, 5]))


# returns True/False if lst2 is equal to lst1 when list is reversed

def reversed_list(lst1, lst2):
    for index in range(len(lst1)):
        if lst1[index] != lst2[len(lst2) - 1 - index]:
            return False
        return True


print(reversed_list([1, 2, 3], [3, 2, 1]))

print(reversed_list([1, 5, 3], [3, 5, 2]))